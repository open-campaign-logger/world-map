// <auto-generated />
using System;
using CampaignKit.WorldMap.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CampaignKit.WorldMap.Migrations
{
    [DbContext(typeof(MappingContext))]
    [Migration("20181208010335_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity("CampaignKit.WorldMap.Entities.Map", b =>
                {
                    b.Property<int>("MapId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdjustedSize");

                    b.Property<string>("ContentType");

                    b.Property<string>("Copyright");

                    b.Property<DateTime>("CreationTimestamp")
                        .HasColumnType("datetime");

                    b.Property<string>("FileExtension");

                    b.Property<int>("MaxZoomLevel");

                    b.Property<string>("Name");

                    b.Property<bool>("RepeatMapInX");

                    b.Property<string>("Secret");

                    b.Property<string>("ThumbnailPath");

                    b.HasKey("MapId");

                    b.ToTable("Maps");

                    b.HasData(
                        new
                        {
                            MapId = 1,
                            AdjustedSize = 4000,
                            ContentType = "image/jpeg",
                            CreationTimestamp = new DateTime(2018, 12, 8, 1, 3, 35, 474, DateTimeKind.Utc).AddTicks(8587),
                            FileExtension = ".jpg",
                            MaxZoomLevel = 4,
                            Name = "Sample",
                            RepeatMapInX = false,
                            Secret = "lNtqjEVQ",
                            ThumbnailPath = "~/world/1/0/zoom-level.png"
                        });
                });

            modelBuilder.Entity("CampaignKit.WorldMap.Entities.Marker", b =>
                {
                    b.Property<int>("MarkerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MapId");

                    b.Property<string>("MarkerData");

                    b.Property<string>("Title");

                    b.Property<int>("x");

                    b.Property<int>("y");

                    b.HasKey("MarkerId");

                    b.HasIndex("MapId");

                    b.ToTable("Markers");
                });

            modelBuilder.Entity("CampaignKit.WorldMap.Entities.Tile", b =>
                {
                    b.Property<int>("TileId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CompletionTimestamp")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("CreationTimestamp")
                        .HasColumnType("DateTime");

                    b.Property<int>("MapId");

                    b.Property<string>("Path");

                    b.Property<int>("TileSize");

                    b.HasKey("TileId");

                    b.HasIndex("MapId");

                    b.ToTable("Tiles");
                });

            modelBuilder.Entity("CampaignKit.WorldMap.Entities.Marker", b =>
                {
                    b.HasOne("CampaignKit.WorldMap.Entities.Map")
                        .WithMany("Markers")
                        .HasForeignKey("MapId");
                });

            modelBuilder.Entity("CampaignKit.WorldMap.Entities.Tile", b =>
                {
                    b.HasOne("CampaignKit.WorldMap.Entities.Map")
                        .WithMany("Tiles")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
