<!--
Copyright 2017-2018 Jochen Linnemann

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
@model MapShowViewModel
@{
	Layout = "_BaseLayout";
}
@section styles {
	<link href="~/css/leaflet.css" rel="stylesheet" />
	<link href="~/css/leaflet.draw.css" rel="stylesheet" />
	<link href="~/css/quill.snow.css" rel="stylesheet" />
	<link href="~/css/popup.css" rel="stylesheet" />
	<style type="text/css">

		html, body {
			position: relative;
			height: 100%;
			margin: 0;
			padding: 0;
		}

		div#map {
			position: absolute;
			top: 65px;
			left: 0;
			right: 0;
			bottom: 0;
		}
	</style>
}
<div id="map"></div>
@RenderBody()
@section scripts {
	<script src="~/js/leaflet.js"></script>
	<script src="~/js/leaflet.draw.js"></script>
	<script src="~/js/quill.js"></script>
	<script src="~/js/worldmap-edit.js"></script>
	<script>
		// **********************************************
		//                  Map Setup
		// **********************************************

		// Create the map box
		mapId = @Model.Id;
		var map = L.map('map').setView([0, 0], 2);

        L.tileLayer('@ViewBag.WorldPath/{z}/{x}_{y}.png', {
            attribution: "Campaign Logger",
            maxZoom: @ViewBag.MaxZoomLevel,
            noWrap: @(ViewBag.NoWrap ? "true": "false"),
            dummy: null
		}).addTo(map);

		// Add a feature group to the map to hold drawn items
		var featureGroup = L.featureGroup().addTo(map);

		// Create a draw tool bar and bind it to the feature group
		var drawControl = new L.Control.Draw({
			draw: {
				position: 'topleft',
				polygon: true,
				polyline: false,
				rectangle: true,
				circle: true
			},
			edit: {
				featureGroup: featureGroup
			}
		}).addTo(map);

		// Add a listener to the map for items that are  added by a user
		map.on(L.Draw.Event.CREATED, drawnItemCreated);

		// Update all layers with any changes made by a user
		map.on(L.Draw.Event.EDITED, drawnItemEdited);

		// Update all layers with any changes made by a user
		map.on(L.Draw.Event.DELETED, drawnItemEdited);

		// Import marker data
		loadMarkers();

	</script>
	@RenderSection("scripts", false)
}